package com.anoop.examples.controllers;

import com.anoop.examples.config.InjectIotoUser;
import com.anoop.examples.model.IotoUser;
import com.anoop.examples.model.Measurement;
import com.anoop.examples.services.measurements.MeasurementService;
import io.swagger.annotations.ApiOperation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@Slf4j
@Controller
@RestController
@RequestMapping("v1/measurements")
public class MeasurementController {

    @Autowired
    private MeasurementService measurementService;

    @Operation(summary = "Creates the measurement and send to cloud")
    @ApiResponse(
            responseCode = "200",
            description = "Measurement which is created created")
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public Measurement send(@InjectIotoUser IotoUser user, @RequestBody Measurement measurement) {
        return measurementService.create(user, measurement);
    }

    @Operation(summary = "Returns a list of measurements generated by the device.")
    @ApiResponse(
            responseCode = "200",
            description = "List of measurements")
    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public List<Measurement> getAll(@InjectIotoUser IotoUser user) {
        return measurementService.getByDeviceId(user.getUserName());
    }

    @Operation(summary = "Returns the measurement for the id.")
    @ApiResponse(
            responseCode = "200",
            description = "Measurement object")
    @Parameter(
            name = "id",
            in = ParameterIn.PATH,
            description = "the id of the measurement")
    @GetMapping(value = {"/{id}"}, produces = MediaType.APPLICATION_JSON_VALUE)
    public Measurement get(@PathVariable(value = "id") String id) {
        return measurementService.get(id);
    }

    @ApiOperation(value = "Delete a measurement", code = 204)
    @Parameter(
            name = "id",
            in = ParameterIn.PATH,
            description = "the id of the measurement")
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<?> delete(@InjectIotoUser IotoUser user,
                                    @PathVariable(value = "id") String id) {
        measurementService.delete(id, user);
        return ResponseEntity.noContent().build();
    }
}
